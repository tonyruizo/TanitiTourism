@using System.ComponentModel.DataAnnotations
@code {
    private ContactFormModel _formModel = new();
    private bool _showSuccessMessage = false;
    private string _name = "";

    [Parameter] public EventCallback<ContactFormModel> OnFormSubmit { get; set; }

    private async Task HandleSubmit()
    {
        // Show Success
        _showSuccessMessage = true;

        // Retrieve contact name 
        _name = _formModel.Name;

        // Reset fields
        _formModel = new ContactFormModel();

        // Remove after 4 seconds
        await Task.Delay(4000);
        _showSuccessMessage = false;
    }

}

<EditForm Model="@_formModel" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label for="name" class="form-label">Full Name</label>
        <InputText id="name" class="form-control" @bind-Value="_formModel.Name"/>
        <ValidationMessage For="@(() => _formModel.Name)"/>
    </div>

    <div class="mb-3">
        <label for="email" class="form-label">Email Address</label>
        <InputText id="email" class="form-control" @bind-Value="_formModel.Email" type="email"
        />
        <ValidationMessage For="@(() => _formModel.Email)"/>
    </div>

    <div class="mb-3">
        <label for="message" class="form-label">Message</label>
        <InputTextArea id="message" class="form-control" @bind-Value="_formModel.Message" rows="4"
        />
        <ValidationMessage For="@(() => _formModel.Message)"/>
    </div>

    <button type="submit" class="btn btn-outline-info text-dark my-3">Submit</button>

    @* Success message *@
    @if (_showSuccessMessage)
    {
        <div class="alert alert-success mt-3 text-center" role="alert">
            Thanks @_name! We will reach out as soon as possible.
        </div>
    }
</EditForm>


@code {

    // Contact Form class
    public class ContactFormModel
    {
        [Required(ErrorMessage = "Please enter your full name.")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please enter a valid email address.")]
        [RegularExpression(@"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$",
            ErrorMessage = "Invalid email format.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please enter your message.")]
        public string Message { get; set; } = string.Empty;
    }

}
